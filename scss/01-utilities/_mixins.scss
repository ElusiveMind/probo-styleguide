@function em($pixel) {
  @return $pixel / 16px * 1em;
}

// https://gist.github.com/webgefrickel/4530526
// usage:
// @include rem(font-size, 16px)
// @include rem(margin, 0 auto 10px)
// @include rem(padding, inherit)

@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $default-browser-font-size: 10px;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    }
    @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $default-browser-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    }
    @else if $value == auto or $value == inherit {
      // auto or inherit - don't add px or rem
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    }
    @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $default-browser-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@mixin white-text {
  color: $probo-pale-medium;
  h1, h2, h3, h4, h5 {
    color: $probo-pale-medium;
  }
}


@mixin link-colors($color, $hover: $color, $active: $color, $focus: $color) {
  color: $color;

  &:hover {
    color: $hover;
  }

  &:active {
    color: $active;
  }

  &:focus {
    color: $focus;
  }
}

@mixin inline-block {
  *vertical-align: auto;
  *zoom: 1;
  *display: inline;
  display: inline-block;
  vertical-align: middle;
}

@mixin cf {
  *zoom: 1;

  &::after,
  &::before {
    content: ' ';
    display: table;
  }

  &::after {
    clear: both;
  }
}

@mixin button($color: #fff, $bottom-color: #e9eaea, $border-color: #e6e6e6, $font: #555555) {
	@include inline-block;
  @include link-colors($font);

  border: 2px solid $border-color;
  background-color: $color;
  background-image: linear-gradient(to bottom, $color, $bottom-color);
  appearance: none;
  padding: 6px 12px;
  border-radius: $border-radius;
  cursor: pointer;
  text-decoration: none;
  font-size: 18px;
  font-weight: 600;

  &:hover {
    text-decoration: none;
    background-color: darken($color, 7%);
    background-image: linear-gradient(to bottom, $bottom-color, $border-color);
    box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.1);
  }

  &:active,
  &:focus {
    background-image: none;
    background-color: $border-color;
  }

  &:disabled {
    background-image: none;
    background-color: $probo-pale-dark;
    color: $probo-pale;
    border-color: $probo-pale-dark;

    &:hover {
      color: $probo-gray-medium;
      box-shadow: none;
    }
  }
}

@mixin visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

  &.focusable {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}

@mixin invisible {
  visibility: hidden;
}

@mixin hidden {
  display: none !important;
}

@mixin badge($color, $font: $probo-pale) {
  @include rem(font-size, 10px);

  border-radius: 50%;
  background-color: $color;
  color: $font;
  padding: 2px 6px;
}
